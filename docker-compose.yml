networks:
  myNetwork:
    driver: bridge

services:
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    container_name: keycloak
    ports:
      - '8080:8080'
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev
    volumes:
      - keycloak-data:/opt/jboss/keycloak/standalone/data
    networks:
      - myNetwork

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - myNetwork

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    user: root
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./Kafka:/bitnami/kafka
    networks:
      - myNetwork
    depends_on:
      - zookeeper

  mysql:
    image: mysql:8.0.38
    container_name: mysql
    ports:
      - '3306:3306'
    environment:
      MYSQL_USER: 'root'
      MYSQL_PASSWORD: 'root'
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_DATABASE: articleMS
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - myNetwork

  mongodb:
    image: mongodb/mongodb-community-server:6.0-ubi8
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - myNetwork

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    restart: on-failure
    ports:
      - '8888:8888'
    volumes:
      - ./config-server/target:/config-server
    networks:
      - myNetwork

  eureka:
    build:
      context: ./eureka
      dockerfile: Dockerfile
    container_name: eureka-server
    restart: on-failure
    ports:
      - '8761:8761'
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
    volumes:
      - ./eureka/target:/eureka
    networks:
      - myNetwork

  api-gateway-server:
    build:
      context: ./api-gateway-server
      dockerfile: Dockerfile
    container_name: api-gateway-server
    restart: on-failure
    ports:
      - '8077:8077'
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka
      - config-server
    volumes:
      - ./api-gateway-server/target:/api-gateway-server
    networks:
      - myNetwork

  article:
    build:
      context: ./article
      dockerfile: Dockerfile
    container_name: article
    restart: on-failure
    ports:
      - '8081:8081'
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/realmy
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/realmy/protocol/openid-connect/certs
      CONFIG_SERVER: optional:configserver:http://config-server:8888
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/articleMS?useUnicode=true&useJDBCCompliantTimezoneShift=true&createDatabaseIfNotExist=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: 'root'
      SPRING_DATASOURCE_PASSWORD:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./article/target:/article
    depends_on:
      - mysql
      - kafka
      - config-server
      - eureka
      - api-gateway-server
      - keycloak
    networks:
      - myNetwork

  stock-ms:
    build:
      context: ./stock-ms
      dockerfile: Dockerfile
    container_name: stock-ms
    restart: on-failure
    ports:
      - '8082:8082'
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/stock-service
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/realmy
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/realmy/protocol/openid-connect/certs
      CONFIG_SERVER: optional:configserver:http://config-server:8888
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./stock-ms/target:/stock-ms
    depends_on:
      - mongodb
      - kafka
      - config-server
      - eureka
      - api-gateway-server
      - keycloak
    networks:
      - myNetwork

volumes:
  keycloak-data:
  mysql-data:
  mongo-data:
